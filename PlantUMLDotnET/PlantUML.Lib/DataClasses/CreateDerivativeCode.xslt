<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:msxsl="urn:schemas-microsoft-com:xslt" exclude-result-prefixes="msxsl"
>
    <xsl:output method="xml" indent="yes"/>

    <xsl:param name="output-filename" select="'output.txt'" />

    <xsl:template match="@* | node()">
        <xsl:copy>
            <xsl:apply-templates select="@* | node()"/>
        </xsl:copy>
    </xsl:template>

    <xsl:template match="/*">
        <FileSet>
            <FileSetFiles>
                <FileSetFile>
                    <RelativePath>
                        <xsl:text>Keyword.designer2.cs</xsl:text>
                    </RelativePath>
                    <xsl:element name="FileContents" xml:space="preserve">/*************************************************
Initially Generated by SSoT.me - 2022
    EJ Alexandra - ssotme odxml42/odxml-to-csharp-pocos
    This be overwritten
*************************************************/
using System;
using System.ComponentModel;
                        
namespace plantumldotnetparser.Lib.DataClasses
{                   
    
    public partial class Keyword 
    {
    <xsl:for-each select="//Keywords/Keyword">
        private static Keyword _<xsl:value-of select="Name"/> = new Keyword() {
            Name = "<xsl:value-of select="Name"/>",
            KeywordText = "<xsl:value-of select="KeywordText"/>"
        };
        public static Keyword @<xsl:value-of select="Name"/> { get { return _<xsl:value-of select="Name"/>; } }</xsl:for-each>
    }
}</xsl:element>
                </FileSetFile>
                <FileSetFile>
                    <RelativePath>
                        <xsl:text>InstructionType.designer2.cs</xsl:text>
                    </RelativePath>
                    <xsl:element name="FileContents" xml:space="preserve">/*************************************************
Initially Generated by SSoT.me - 2022
    EJ Alexandra - ssotme odxml42/odxml-to-csharp-pocos
    This be overwritten
*************************************************/
using System;
using System.Collections.Generic;
using System.ComponentModel;
                        
namespace plantumldotnetparser.Lib.DataClasses
{                   
    public partial class InstructionType
    {
        public static List&lt;InstructionType> InstructionTypes { get; set; } = new List&lt;InstructionType>();    
<xsl:for-each select="//InstructionTypes/InstructionType">
        private static InstructionType _<xsl:value-of select="Name"/> = new InstructionType() {
            Name = "<xsl:value-of select="Name"/>",
            KeywordText = "<xsl:value-of select="KeywordText"/>",
            RegEx = "<xsl:value-of select="RegEx"/>"
        };
        public static InstructionType @<xsl:value-of select="Name"/> { get { return _<xsl:value-of select="Name"/>; } }
    </xsl:for-each>
        static InstructionType()
        {
<xsl:for-each select="//InstructionTypes/InstructionType">
            InstructionTypes.Add(@<xsl:value-of select="Name"/>);            
</xsl:for-each>        
        }
    }
}</xsl:element>
                </FileSetFile>
            </FileSetFiles>
        </FileSet>
    </xsl:template>
</xsl:stylesheet>
